{"version":3,"sources":["components/Table/Table.js","utilities.js","components/Map/Map.js","components/InfoBoxes/InfoBox.js","components/LineGraph/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["Table","countries","className","map","country","cases","numeral","format","sortData","data","sortedData","sort","a","b","casesTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillOpacity","color","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","lookNiceStats","stat","Map","zoom","TileLayer","url","attribution","Infobox","title","total","active","isRed","isBlack","isGreen","props","Card","onClick","CardContent","Typography","fill","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","gettingCountryData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14450e4f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","//Helpers used in projects\r\nimport React from \"react\";\r\nimport numeral from \"numeral\"; //used to format numbers in a certain way\r\n//features from react leaflet\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n//this function is used in App.js to sort countries in order of number of cases\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else return 1;\r\n  });\r\n  return sortedData;\r\n};\r\n\r\n//\r\nexport const buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\n//used for the circle colors on map depending on case type (recovered, deaths, cases)\r\nexport const casesTypeColors = {\r\n  cases: {\r\n    hex: \"rgb(204,16,52)\",\r\n    multiplier: 300\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 300\r\n  },\r\n  deaths: {\r\n    hex: \"rgb(57,57,57)\",\r\n    multiplier: 1200\r\n  }\r\n};\r\n\r\n// drawing interactive circles on the map\r\nexport const showDataOnMap = (data, casesType = \"cases\") => {\r\n  return data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      //with radius: more cases means bigger circle on map\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <h3 className=\"info-name\">{country.country} </h3>\r\n          <div className=\"info-cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n};\r\n\r\n//making stats nice in the 3 info boxes\r\n\r\nexport const lookNiceStats = (stat) => {\r\n  return stat ? `+${numeral(stat).format(\"0,0a\")}` : \"+0\";\r\n};\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\n// 'leaflet/dist/leaflet.css' is required to get map working.\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"../../utilities\";\r\n\r\nfunction Map({ center, zoom, countries, casesType }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          // attribution below is asked for by open street map\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {/* looping through all the countries and drawing circles on the screen */}\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nimport \"./InfoBox.css\";\r\n//the spread operator in the props area handles any other props passed down to infoBox\r\nfunction Infobox({\r\n  title,\r\n  cases,\r\n  total,\r\n  active,\r\n  isRed,\r\n  isBlack,\r\n  isGreen,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isBlack && \"infoBox--black\"\r\n      } ${isRed && \"infoBox--red\"} `}\r\n    >\r\n      <CardContent>\r\n        <Typography color='textSecondary' className='infoBox__title'>\r\n          {title}\r\n        </Typography>\r\n        <h2\r\n          className={`infoBox__cases  ${isRed && \"infoBox__cases--red\"} ${\r\n            isGreen && \"infoBox__cases--green\"\r\n          }`}\r\n        >\r\n          {cases}\r\n        </h2>\r\n        <Typography color='textSecondary' className='infoBox__total'>\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Infobox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport showDataOnMap from \"../../utilities\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"rgb(204,16,52)\",\r\n    fill: \"rgb(204,16,52, 0.5)\",\r\n    multiplier: 300\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    fill: \"rgb(125,215,29, 0.5)\",\r\n    multiplier: 300\r\n  },\r\n  deaths: {\r\n    hex: \"rgb(57,57,57)\",\r\n    fill: \"rgb(57,57,57, 0.5)\",\r\n    multiplier: 700\r\n  }\r\n};\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0\r\n    }\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      }\r\n    }\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\"\r\n        }\r\n      }\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\n//\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {/* if their is no data from the useEffect fetch, it will return an undefined */}\r\n      {data?.length > 0 && (\r\n        <Line\r\n          className=\"lineGraph\"\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: `${casesTypeColors[casesType].fill}`,\r\n                borderColor: `${casesTypeColors[casesType].hex}`,\r\n                data: data\r\n              }\r\n            ]\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\r\n\r\nimport Table from \"./components/Table/Table\";\r\nimport Map from \"./components/Map/Map\";\r\nimport Infobox from \"./components/InfoBoxes/InfoBox\";\r\nimport LineGraph from \"./components/LineGraph/LineGraph\";\r\nimport { sortData } from \"./utilities\";\r\nimport { lookNiceStats } from \"./utilities\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.08, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const gettingCountryData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country, // country names such as South Africa, United Kingdom etc\r\n            value: country.countryInfo.iso2 // abbreviations such as RSA, USA, UK etc\r\n          }));\r\n          //ordering countries by most number of cases\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setCountries(countries);\r\n          //setting mapCountries to all the data from the fetch above. we need all the data\r\n          setMapCountries(data);\r\n        });\r\n    };\r\n    gettingCountryData();\r\n  }, [countries]);\r\n\r\n  const onCountryChange = async (event) => {\r\n    const countryCode = event.target.value;\r\n    console.log(countryCode);\r\n    // setting state for the country...\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountry(countryCode);\r\n        setCountryInfo(data);\r\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n        // console.log(\">>><<\", data.countryInfo.lat);\r\n      });\r\n\r\n    console.log(\"country info >> \", countryInfo);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        <div className=\"header\">\r\n          <h1>Covid-19 Tracker</h1>\r\n          <FormControl>\r\n            <Select\r\n              className=\"header__selectBox\"\r\n              variant=\"outlined\"\r\n              value={country}\r\n              onChange={onCountryChange}\r\n            >\r\n              {/* Worldwide option */}\r\n              <MenuItem value=\"worldwide\"> WorldWide</MenuItem>\r\n\r\n              {/* Renders all the countries */}\r\n              {countries.map((country) => (\r\n                <MenuItem value={country.value}> {country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"statistics\">\r\n          <Infobox\r\n            isRed //used for Css styling\r\n            active={casesType === \"cases\"}\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            title=\"CoronaVirus Cases\"\r\n            cases={lookNiceStats(countryInfo.todayCases)}\r\n            // regular stats --> will show actual numbers\r\n            // cases={countryInfo.todayCases}\r\n            total={lookNiceStats(countryInfo.cases)}\r\n          />\r\n          <Infobox\r\n            isGreen\r\n            active={casesType === \"recovered\"}\r\n            onClick={(e) => setCasesType(\"recovered\")}\r\n            title=\"Recovered\"\r\n            cases={lookNiceStats(countryInfo.todayRecovered)}\r\n            // regular stats --> will show actual numbers\r\n            // cases={countryInfo.todayRecovered}\r\n            total={lookNiceStats(countryInfo.recovered)}\r\n          />\r\n          <Infobox\r\n            isBlack //used for Css styling\r\n            active={casesType === \"deaths\"}\r\n            onClick={(e) => setCasesType(\"deaths\")}\r\n            title=\"Deaths\"\r\n            cases={lookNiceStats(countryInfo.todayDeaths)}\r\n            // regular stats --> will show actual numbers\r\n            // cases={countryInfo.todayDeaths}\r\n\r\n            total={lookNiceStats(countryInfo.deaths)}\r\n          />\r\n        </div>\r\n        <Map\r\n          casesType={casesType}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n          countries={mapCountries}\r\n        />\r\n      </div>\r\n      <div className=\"app__right\">\r\n        <Card>\r\n          <CardContent>\r\n            <h3>Live Cases By country</h3>\r\n            <Table countries={tableData} />\r\n            <h3 className=\"app__right-secondH3\">World Wide New {casesType}</h3>\r\n            <LineGraph className=\"app__graph\" casesType={casesType} />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}